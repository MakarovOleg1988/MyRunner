//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MyRunnerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace MyRunner
{
    public partial class @MyRunnerController : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MyRunnerController()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyRunnerController"",
    ""maps"": [
        {
            ""name"": ""Action map"",
            ""id"": ""c6b90491-41a8-42d7-bffa-06e8b7b1726f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""3d3a3af4-5baa-471e-a5f1-cfb7c18a37ef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2f438374-8b9f-4cc6-a6ce-edf9434be961"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8d1fcaa0-7777-4401-8b13-75cf41061e61"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5b364b6f-b8de-4319-a596-478f56173c91"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1e86e0cd-d15c-429f-b855-03c7563898e4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""065350a5-e03b-474c-a950-a5b2562c5b8c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Action map
            m_Actionmap = asset.FindActionMap("Action map", throwIfNotFound: true);
            m_Actionmap_Movement = m_Actionmap.FindAction("Movement", throwIfNotFound: true);
            m_Actionmap_Jump = m_Actionmap.FindAction("Jump", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Action map
        private readonly InputActionMap m_Actionmap;
        private IActionmapActions m_ActionmapActionsCallbackInterface;
        private readonly InputAction m_Actionmap_Movement;
        private readonly InputAction m_Actionmap_Jump;
        public struct ActionmapActions
        {
            private @MyRunnerController m_Wrapper;
            public ActionmapActions(@MyRunnerController wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Actionmap_Movement;
            public InputAction @Jump => m_Wrapper.m_Actionmap_Jump;
            public InputActionMap Get() { return m_Wrapper.m_Actionmap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ActionmapActions set) { return set.Get(); }
            public void SetCallbacks(IActionmapActions instance)
            {
                if (m_Wrapper.m_ActionmapActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_ActionmapActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_ActionmapActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_ActionmapActionsCallbackInterface.OnMovement;
                    @Jump.started -= m_Wrapper.m_ActionmapActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_ActionmapActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_ActionmapActionsCallbackInterface.OnJump;
                }
                m_Wrapper.m_ActionmapActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                }
            }
        }
        public ActionmapActions @Actionmap => new ActionmapActions(this);
        public interface IActionmapActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
    }
}
